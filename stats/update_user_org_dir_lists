#!/usr/bin/ruby

require "ldap"
require 'rubygems'
require 'yaml'
require 'json'

if configurations = YAML.load_file("/etc/puavo/ldap.yml") rescue nil
#  puts "Using config/ldap.yml"
else
  puts "Not found LDAP configuration file (config/ldap.yml)"
  exit
end

target_dir = ARGV[0]

puts "Saving tag files to #{target_dir}"

@binddn = configurations["settings"]["ldap_server"]["bind_dn"]
@bindpw = configurations["settings"]["ldap_server"]["password"]
@ldaphost = configurations["settings"]["ldap_server"]["host"]
@ldapuri = "ldap://#{@ldaphost}"
@exclude = configurations["settings"]["tags"]["exclude_servers"]

@tags = Hash.new
@tags['all_servers'] = Array.new

@users = Hash.new

@mounts = Hash.new

def get_servers(suffix)
  serverlist = ""

  conn = LDAP::SSLConn.new(host=@ldaphost, port=636)
  conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)

  devices = Hash.new
  name = suffix

  conn.bind(@binddn, @bindpw) do
    begin
      conn.search(suffix, LDAP::LDAP_SCOPE_BASE, "(objectClass=eduOrg)") {|e|
        name = e.get_values('puavoDomain')[0]
      }
      
      conn.search(suffix, LDAP::LDAP_SCOPE_SUBTREE, "(objectClass=posixAccount)") {|e|
        user_name = e.get_values('cn')
        @users[user_name] = Hash.new
        @users[user_name][:organization] = name
        if e.get_values('homeDirectory')
          e.get_values('homeDirectory').each {|homedir|
            homedir.slice!("/home/")
            ( mount, user_home ) = homedir.split("/")
            #puts "mount: #{mount} home dir: #{user_home}"
            @users[user_name][:mount] = mount
            @users[user_name][:homedirsuffix] = user_home
          }
         end
        if e.get_values('givenName')
          givenname = e.get_values('givenName')[0]
          @users[user_name][:givenname] = givenname
          @users[user_name][:fullname] = ( givenname || "" )
          
        end
        if e.get_values('sn')
          surname = e.get_values('sn')[0]
          @users[user_name][:surname] = surname
          @users[user_name][:fullname] = "#{@users[user_name][:fullname]} #{surname}"
        end
      }
      conn.search(suffix, LDAP::LDAP_SCOPE_SUBTREE, "(objectClass=puavoServer)") {|e|
        ltsp_name = e.get_values('cn')[0]
        if e.get_values('puavoExport')
#          @mounts[name] = Hash.new
#          @mounts[name][:ltspname] = ltsp_name
#          @mounts[name][:exports] = Array.new
          e.get_values('puavoExport').each {|puavoExport|
            puavoExport.slice!("/home/")
            if ! puavoExport.include?("administration")
               @mounts[puavoExport] = Array.new unless @mounts[puavoExport]
               exportServer = Hash.new
               exportServer[:ltsp] = ltsp_name
               exportServer[:organization] = name
               @mounts[puavoExport].push(exportServer)
            end
            }
        end
      }
    rescue LDAP::ResultError
      conn.perror("Virhe")
      puts "Virhe"
    end  
  end
end

conn = LDAP::SSLConn.new(host=@ldaphost, port=636)
conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)

conn.bind(@binddn, @bindpw) do
  begin
    conn.search("", LDAP::LDAP_SCOPE_BASE, "(objectClass=*)", ["namingContexts"]) {|e|
      e.get_values("namingContexts").each {|suffix|
        if (! @exclude.include?(suffix))
          # puts suffix
          get_servers(suffix)
        end
      }
    }

    rescue LDAP::ResultError
      conn.perror("LDAP connection failed")
      puts "LDAP connection failed"
    end  
end

# puts @tags.inspect

#puts @users.inspect
#puts @mounts.inspect
## @tags.keys.sort.each do |tag|
File.open("#{target_dir}/mounts", "w") {|f|
     f.write(@mounts.to_json)
  }
File.open("#{target_dir}/users", "w") {|f|
     f.write(@users.to_json)
  }
