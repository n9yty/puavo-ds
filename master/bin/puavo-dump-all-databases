#!/usr/bin/ruby1.9.3
#
# Dump all databases and slapd configurations (cn=config)
#
# Usage: puavo-dump-all-databasesa [DUMP DIRECTORY]
#

require 'ldap'
require 'optparse'
require 'puavo/etc'
require 'puavo/execute'
require 'timeout'

options = {}
options[:verbose] = false

Timeout_seconds = 900

OptionParser.new do |opts|
  opts.banner = "Usage: puavo-restore-all-databases [options]"

  opts.on("-d", "--destination-directory [DESTDIR]", "destination directory for dump files") do |directory|
    options[:destdir] = directory
  end

  # FIXME: this option is temporary
  opts.on("--exclude-database [dc=edu,dc=example,dc=fi]", "Skip this database when dump all databases") do |database|
    options[:excludedb] = database
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely. Print STDERR of shell command (eg. slapcat)") do |v|
    options[:verbose] = v
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

if options[:destdir].nil?
  $stderr.puts "Missing argument --destination-directory"
  exit 2
end

if not File.directory?(options[:destdir])
  $stderr.puts "Can't find destination directory: #{options[:destdir]}"
  exit 2
end

databases = []

Timeout::timeout(Timeout_seconds) do
  # Dump cn=config database
  puts "> dump cn=config to " + File.join(options[:destdir], "cn=config.ldif")
  response = Puavo::Execute.run(
	       ["/usr/bin/timeout", "-k", "20", Timeout_seconds.to_s,
		"/usr/sbin/slapcat",
		"-b",
		"cn=config",
		"-l", File.join(options[:destdir], "cn=config.ldif")])
  $stderr.puts response.stderr if options[:verbose]

  # Find all databases
  conn = LDAP::SSLConn.new(host=PUAVO_ETC.ldap_master, port=636)
  conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)

  filter = "(&(objectClass=olcDatabaseConfig)(objectClass=olcHdbConfig))"
  conn.bind(PUAVO_ETC.ldap_dn, PUAVO_ETC.ldap_password) do
    conn.search("cn=config",
		LDAP::LDAP_SCOPE_SUBTREE,
		filter,
		["olcSuffix"]) do |result|

      databases.push(result["olcSuffix"].first)
    end
  end

  raise "Can't find any databases: #{filter}" if databases.empty?
end

exitstatus = 0

# Backup all databases
databases.each do |base|
  begin
    Timeout::timeout(Timeout_seconds) do
      next if base == options[:excludedb]

      backup_file = File.join(options[:destdir], "#{base}.ldif")

      puts "> dump #{base} database to #{ backup_file } file"

      response = Puavo::Execute.run(
		   ["/usr/bin/timeout", "-k", "20", Timeout_seconds.to_s,
		    "/usr/sbin/slapcat",
		    "-b", base,
		    "-l", backup_file ])
      $stderr.puts response.stderr if options[:verbose]
    end
  rescue Puavo::ExitStatusError => err
    $stderr.puts ">> error when dumping #{ base }:"
    $stderr.puts ">> slapcat returned error code #{ err.response.exit_status }"
    $stderr.puts err.response.stderr unless err.response.stderr.empty?
    exitstatus = 1
  rescue StandardError => err
    $stderr.puts ">> error when dumping #{ base }:"
    $stderr.puts err.message
    exitstatus = 1
  end
end

exit(exitstatus)
